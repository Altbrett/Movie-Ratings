#BlueJ class context
comment0.target=MovieRatings
comment0.text=\r\n\ Create\ a\ program\ to\ store\ and\ process\ movie\ ratings.\r\n\ Use\ a\ 2D\ array\ to\ store\ ratings\ by\ different\ reviewers\ \r\n\ for\ different\ movies.\ Each\ row\ represents\ a\ different\ movie\ \r\n\ and\ each\ column\ represents\ a\ different\ reviewer.\ \r\n\ There\ will\ also\ be\ two\ separate\ arrays\ to\ store\ the\ names\ of\ movies\r\n\ and\ the\ names\ of\ the\ reviewers.\ You\ may\ use\ the\ attached\ test\ program.\r\n\r\n\ @Brett\ Althoff\r\n\ @1.0\ 02/22/2020\r\n
comment1.params=reviewers\ movies
comment1.target=MovieRatings(java.lang.String[],\ java.lang.String[])
comment1.text=\r\n\ MovieRatings()\r\n\ Constructor\ for\ the\ class\r\n\ One\ parameter\ is\ an\ array\ of\ reviewers\ names\r\n\ One\ parameter\ is\ an\ array\ of\ movie\ names\r\n\ Description\:\ set\ the\ parameters\ equal\ to\ the\ private\ data\ members\ \r\n\ for\ the\ movies\ and\ reviewers;\ initialize\ the\ 2D\ ratings\ array\ based\ on\r\n\ the\ size\ of\ the\ reviewers\ array\ (rows)\ and\ the\ size\ of\ the\ movies\ array\ \r\n\ (columns)\r\n\ \r\n\ @param\ reviewers\ establishing\ the\ reviewers\r\n\ @param\ movies\ establishing\ the\ movies\r\n
comment10.params=
comment10.target=void\ printAll()
comment10.text=\r\n\ Method\ to\ go\ through\ and\ print\ all\ the\ results\r\n\ \r\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\r\n\ Main\ Method\r\n
comment2.params=
comment2.target=double\ getAvgRating()
comment2.text=\r\n\ getAvgRating()\r\n\ Returns\ a\ double\ value\ representing\ the\ average\ rating\r\n\ Description\:\ Find\ the\ average\ rating\ for\ all\ movies\ and\ \r\n\ all\ reviewers\ (i.e.\ all\ data\ in\ the\ table)\r\n\ \r\n\ @param\ total\ setting\ total\ ratings\ to\ 0\r\n\ @return\ calculates\ the\ average\ rating\ for\ movie\r\n
comment3.params=index
comment3.target=double\ getAvgRatingsbyMovie(int)
comment3.text=\r\n\ getAvgRatingsbyMovie()\r\n\ One\ parameter,\ the\ index\ of\ the\ movie\ to\ find\ all\ the\ reviews\ for\r\n\ Returns\ a\ double\ value\ representing\ the\ average\ rating\r\n\ Description\:\ Find\ the\ average\ rating\ for\ a\ single\ movie\ \r\n\ (i.e.\ one\ column\ representing\ all\ the\ reviewers\ scores\ for\ that\ one\ movie)\r\n\ \r\n\ @return\ calculates\ average\ by\ movie\ taken\ into\ account\ reviews\ array\ length\r\n
comment4.params=index
comment4.target=double\ getAvgRatingsbyReviewer(int)
comment4.text=\r\n\ getAvgRatingsbyReviewer()\r\n\ One\ parameter,\ the\ index\ of\ the\ reviewer\ to\ find\ all\ the\ reviews\ for\r\n\ Returns\ a\ double\ value\ representing\ the\ average\ rating\r\n\ Description\:\ Find\ the\ average\ rating\ for\ a\ single\ reviewer\ \r\n\ (i.e.\ one\ row\ representing\ all\ the\ movies\ for\ that\ one\ reviewer)\r\n\ \r\n\ @return\ calculates\ average\ rating\ based\ on\ reviewer\r\n\ taking\ movie\ array\ length\ into\ account\r\n
comment5.params=movieName
comment5.target=int\ getMovieIndex(java.lang.String)
comment5.text=\r\n\ getMovieIndex()\r\n\ One\ parameter,\ the\ name\ of\ the\ movie\r\n\ Returns\ an\ integer\ representing\ the\ index\ number\ of\ that\ movie\r\n\ Description\:\ Searches\ the\ movies\ array\ to\ find\ the\ index\ location\ \r\n\ for\ that\ movie.\ This\ can\ then\ be\ used\ to\ find\ the\ ratings\ for\ that\ movie\r\n\ in\ the\ ratings\ 2D\ array\r\n\ \r\n\ @return\ calculates\ index\ for\ movie\r\n
comment6.params=reviewerName
comment6.target=int\ getReviewerIndex(java.lang.String)
comment6.text=\r\n\ getReviewerIndex()\r\n\ One\ parameter,\ the\ name\ of\ the\ reviewer\r\n\ Returns\ an\ integer\ representing\ the\ index\ number\ of\ that\ reviewer\r\n\ Description\:\ Searches\ the\ reviewers\ array\ to\ find\ the\ index\ location\ \r\n\ for\ that\ reviewer.\ This\ can\ then\ be\ used\ to\ find\ the\ ratings\ for\ that\r\n\ reviewer\ in\ the\ ratings\ 2D\ array\r\n\ \r\n\ @return\ grabs\ the\ reviewer\ index\r\n
comment7.params=movieIndex\ reviewerIndex\ rating
comment7.target=void\ setRating(int,\ int,\ double)
comment7.text=\r\n\ setRating()\r\n\ One\ parameter\ each\ for\ the\ movie\ index,\ for\ the\ reviewer\ index\ and\ for\r\n\ the\ rating\ to\ store\r\n\ Description\:\ the\ reviewer\ index\ specifies\ the\ row,\ the\ movie\ index\r\n\ specifies\ the\ column\ and\ the\ rating\ is\ the\ value\ to\ store\ in\ that\ cell\r\n\ \r\n\ Sets\ the\ rating\ accordingly\r\n
comment8.params=movieIndex
comment8.target=void\ printMovieRatings(int)
comment8.text=\r\n\ printMovieRatings()\r\n\ One\ parameter\ that\ represents\ the\ index\ of\ the\ movie\ name\ and\ the\ \r\n\ movie\ ratings\r\n\ Description\:\ prints\ the\ movie\ name\ and\ the\ ratings\ to\ System.out\r\n\ Example\:\ "The\ Lego\ Movie\:\ 5,\ 6,\ 2,\ 7,\ 8"\r\n\ \r\n
comment9.params=reviewerIndex
comment9.target=void\ printReviewerRatings(int)
comment9.text=\r\n\ printReviewerRatings()\r\n\ One\ parameter\ that\ represents\ the\ index\ of\ the\ reviewers\ name\ \r\n\ and\ their\ movie\ ratings\r\n\ Description\:\ prints\ the\ reviewer\ name\ and\ the\ ratings\ to\ System.out\r\n\ Example\:\ "Roger\ Ebert\:\ 4,\ 2,\ 8,\ 9"\r\n\ \r\n
numComments=12
